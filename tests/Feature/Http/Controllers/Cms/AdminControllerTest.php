<?php

namespace Tests\Feature\Http\Controllers\Cms;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\Cms\AdminController
 */
class AdminControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $admin = factory(\App\Models\Admin::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user, 'admin')->delete(route('cms.admin-users.destroy', ['id' => $admin->id]));

        $response->assertOk();
        $this->assertDeleted($cms);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user, 'admin')->get(route('cms.admin-users'));

        $response->assertOk();
        $response->assertViewIs('admin-users.index');
        $response->assertViewHas('users');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user, 'admin')->post(route('cms.admin-users.store'), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $admin = factory(\App\Models\Admin::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user, 'admin')->patch(route('cms.admin-users.update', ['id' => $admin->id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    // test cases...
}
